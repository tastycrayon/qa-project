package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"database/sql"
	"time"

	"github.com/tastycrayon/qa-project/graphql-server/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	const query = `INSERT INTO todos (title, is_complete) VALUES(?,?)`
	result, err := r.DB.ExecContext(ctx, query, input.Title, false)
	if err != nil {
		return nil, err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return nil, err
	}
	return GetTodoByID(r.DB, int(id))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return GetTodos(r.DB)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func GetTodoByID(db *sql.DB, id int) (*model.Todo, error) {
	ctx := context.Background()
	const query = `SELECT id, title, is_complete FROM todos WHERE ID=?`

	row := db.QueryRowContext(ctx, query, id)
	var todo model.Todo
	err := row.Scan(&todo.ID, &todo.Title, &todo.IsComplete)
	if err != nil {
		return nil, err
	}
	return &todo, nil
}
func GetTodos(db *sql.DB) ([]*model.Todo, error) {
	time.Sleep(time.Second * 3)
	ctx := context.Background()
	const query = `SELECT id, title, is_complete FROM todos`

	var todos []*model.Todo
	rows, err := db.QueryContext(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	// rest of the function
	for rows.Next() {
		var todo model.Todo
		err := rows.Scan(&todo.ID, &todo.Title, &todo.IsComplete)
		if err != nil {
			return nil, err
		}
		todos = append(todos, &todo)
	}
	return todos, err
}
